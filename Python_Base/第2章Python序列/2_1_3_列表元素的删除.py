# （1）使用del命令删除列表中的指定位置上的元素。
a_list = [3,5,7,9,11]
del a_list[1]
print(a_list)
# [3, 7, 9, 11]


# （2）使用列表的pop()方法删除并返回指定位置（默认为最后一个）上的元素，如果给定的索引超出了列表的范围则抛出异常。
a_list = list((3,5,7,9,11))
print(a_list.pop())
# 11
print(a_list)
# [3, 5, 7, 9]
print(a_list.pop(1))
# 5
print(a_list)
# [3, 7, 9]

# （3）使用列表对象的remove()方法删除首次出现的指定元素，如果列表中不存在要删除的元素，则抛出异常。
a_list = [3,5,7,9,7,11]
a_list.remove(7)
print(a_list)
# [3, 5, 9, 7, 11]

# 代码编写好后必须要经过反复测试，不能满足于几次测试结果正确。例如，下面的代码成功地删除了列表中的重复元素，执行结果是完全正确的。
x = [1,2,1,2,1,2,1,2,1]
for i in x:
    if i == 1:
        x.remove(i)	
print(x)
# [2, 2, 2, 2]

# 然而，上面这段代码的逻辑是错误的。同样的代码，仅仅是所处理的数据发生了一点变化，然而当循环结束后却发现并没有把所有的“1”都删除，只是删除了一部分。
x = [1,2,1,2,1,1,1]
for i in x:
    if i == 1:
        x.remove(i)
print(x)
# [2, 2, 1]

# 正确的代码：
x = [1,2,1,2,1,1,1]
for i in range(len(x)-1,-1,-1):         #从后往前删
    if x[i]==1:
        del x[i]
print(x)
# [2, 2]
