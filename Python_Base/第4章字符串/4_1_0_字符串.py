# 最早的字符串编码是美国标准信息交换码ASCII，仅对10个数字、26个大写英文字母、26个小写英文字母及一些其他符号进行了编码。ASCII码采用1个字节来对字符进行编码，最多只能表示256个符号。

# 随着信息技术的发展和信息交换的需要，各国的文字都需要进行编码，不同的应用领域和场合对字符串编码的要求也略有不同，于是又分别设计了多种不同的编码格式，常见的主要有UTF-8、UTF-16、UTF-32、GB2312、GBK、CP936等。

# GB2312是我国制定的中文编码，使用1个字节表示英语，2个字节表示中文；GBK是GB2312的扩充，而CP936是微软在GBK基础上开发的编码方式。GB2312、GBK和CP936都是使用2个字节表示中文。
# UTF-8对全世界所有国家需要用到的字符进行了编码，以1个字节表示英语字符(兼容ASCII)，以3个字节表示常见汉字，还有些语言的符号使用2个字节（例如俄语和希腊语符号）或者4个字节。

# 不同编码格式之间相差很大，采用不同的编码格式意味着不同的表示和存储形式，把同一字符存入文件时，写入的内容可能会不同，在试图理解其内容时必须了解编码规则并进行正确的解码。如果解码方法不正确就无法还原信息，从这个角度来讲，字符串编码也具有加密的效果。

# >>> '中国'.encode('utf8')
# b'\xe4\xb8\xad\xe5\x9b\xbd'
# >>> '中国'.encode('cp936')
# b'\xd6\xd0\xb9\xfa'
# >>> '中国'.encode('cp936').decode('cp936')
# '中国'
# >>> '测试'.encode('utf8').decode('gbk')
# '娴嬭瘯'

# Python 3.x完全支持中文字符，默认使用UTF8编码格式，无论是一个数字、英文字母，还是一个汉字，在统计字符串长度时都按一个字符对待和处理。
s = '中国山东烟台'
print(len(s))                   #字符串长度，或者包含的字符个数
# 6
s = '中国山东烟台ABCDE'   #中文与英文字符同样对待，都算一个字符
print(len(s))
# 11
姓名 = '张三'             #使用中文作为变量名
print(姓名)               #输出变量的值
# 张三

# 常用格式字符


