# 将可能需要反复执行的代码封装为函数，并在需要该功能的地方进行调用，不仅可以实现代码复用，更重要的是可以保证代码的一致性，只需要修改该函数代码则所有调用均受到影响。
# 设计函数时，应注意提高模块的内聚性，同时降低模块之间的隐式耦合。
# 在实际项目开发中，往往会把一些通用的函数封装到一个模块中，并把这个通用模块文件放到顶层文件夹中，这样更方便管理。
# 在编写函数时，应尽量减少副作用，尽量不要修改参数本身，不要修改除返回值以外的其他内容。
# 不要在一个函数中执行太多的功能，尽量只让一个函数完成一个高度相关且大小合适的任务，一个函数的代码尽量能在一个屏幕内完整显示。
# 尽量减少不同函数之间的隐式耦合，减少全局变量的使用，使得函数之间仅通过调用和参数传递来显式体现其相互关系。
# 应充分利用Python函数式编程的特点，让自己定义的函数尽量符合纯函数式编程的要求，例如保证线程安全、可以并行运行等等。
# 函数定义语法：
# def 函数名([参数列表]):
#     '''注释'''
#     函数体

# 注意事项：
# 函数形参不需要声明类型，也不需要指定函数返回值类型
# 即使该函数不需要接收任何参数，也必须保留一对空的圆括号
# 括号后面的冒号必不可少
# 函数体相对于def关键字必须保持一定的空格缩进
# Python允许嵌套定义函数

# 生成斐波那契数列中小于n的所有数值的函数定义：
def fib(n):
    '''打印斐波那契数列'''
    a, b = 1, 1
    while a < n:
        print(a, end=' ')
        a, b = b, a+b
    print()

fib(1000)
# 在定义函数时，开头部分的注释并不是必需的，但如果为函数的定义加上注释的话，可以为用户提供友好的提示。




